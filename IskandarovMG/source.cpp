#include <iostream>
#include <string>
using namespace std;
char board[101] = {};

void clearscreen() {// очищает окно консоли, функция clearscreen ни чего не возвращае.
    for (int i = 0; i < 50; i++) {
        std::cout << std::endl;
    }
}

void clearboard() {//эта функция очищает доску и ни чего не возвращает
    for (int i = 0; i < 101; i++) {
        board[i] = '-';
    }

}

bool has_wonQ(char player) {
    int wins[176][4] = { { 0, 1, 2, 3 }, { 1, 2, 3, 4 }, { 2, 3, 4, 5 }, { 3, 4, 5, 6 }, { 4, 5, 6, 7 }, { 5, 6, 7, 8 }, { 6, 7, 8, 9 }, { 7, 8, 9, 10 },
        { 10, 11, 12, 13 }, { 11, 12, 13, 14 }, { 12, 13, 14, 15 }, { 13, 14, 15, 16 }, { 14, 15, 16, 17 }, { 15, 16, 17, 18 }, { 16, 17, 18, 19 }, { 17, 18, 19, 20 }, 
        { 20, 21, 22, 23 }, { 21, 22, 23, 24 }, { 22, 23, 24, 25 }, { 23, 24, 25, 26 }, { 24, 25, 26, 27 }, { 25, 26, 27, 28 }, { 26, 27, 28, 29 }, { 27, 28, 29, 30 },
        { 30, 31, 32, 33 }, { 31, 32, 33, 34 }, { 32, 33, 34, 35 }, { 33, 34, 35, 36 }, { 34, 35, 36, 37 }, { 35, 36, 37, 38 }, { 36, 37, 38, 39 }, { 37, 38, 39, 40 },
        { 40, 41, 42, 43 }, { 41, 42, 43, 44 }, { 42, 43, 44, 45 }, { 43, 44, 45, 46 }, { 44, 45, 46, 47 }, { 45, 46, 47, 48 }, { 46, 47, 48, 49 }, { 47, 48, 49, 50},
        { 50, 51, 52, 53 }, { 51, 52, 53, 54 }, { 52, 53, 54, 55 }, { 53, 54, 55, 56 }, { 54, 55, 56, 57 }, { 55, 56, 57, 58 }, { 56, 57, 58, 59 }, { 57, 58, 59, 60 },
        { 60, 61, 62, 63 }, { 61, 62, 63, 64 }, { 62, 63, 64, 65 }, { 63, 64, 65, 66 }, { 64, 65, 66, 67 }, { 65, 66, 67, 68 }, { 66, 67, 68, 69 }, { 67, 68, 69, 70 },
        { 70, 71, 72, 73 }, { 71, 72, 73, 74 }, { 72, 73, 74, 75 }, { 73, 74, 75, 76 }, { 74, 75, 76, 77 }, { 75, 76, 77, 78 }, { 76, 77, 78, 79 }, { 77, 77, 79, 80 },
        { 80, 81, 82, 83 }, { 81, 82, 83, 84 }, { 82, 83, 84, 85 }, { 83, 84, 85, 86 }, { 84, 85, 86, 87 }, { 85, 86, 87, 88 }, { 86, 87, 88, 89 }, { 87, 88, 89, 90 },
        { 90, 91, 92, 93 }, { 91, 92, 93, 94 }, { 92, 93, 94, 95 }, { 93, 94, 95, 96 }, { 94, 95, 96, 97 }, { 95, 96, 97, 98 }, { 96, 97, 98, 99 }, { 97, 98, 99, 100 },
        { 0, 11, 22, 33 }, { 1, 12, 23, 34 }, { 2, 13, 24, 35 }, { 3, 14, 25, 36 }, { 4, 15, 26, 37 }, { 5, 16, 27, 38 }, { 6, 17, 28, 39 }, { 7, 18, 29, 40 },
        { 10, 21, 32, 43}, { 11, 22, 33, 44}, { 12, 23, 34, 45}, { 13, 24, 35, 46}, { 14, 25, 36, 47}, { 15, 26, 37, 48}, { 16, 27, 38, 49}, { 17, 28, 39, 50},
        { 20, 31, 42, 53}, { 21, 32, 43, 54}, { 22, 33, 44, 55}, { 23, 34, 45, 56}, { 24, 35, 46, 57}, { 25, 36, 47, 58}, { 26, 37, 48, 59}, { 27, 38, 49, 60},
        { 30, 41, 52, 63}, { 31, 42, 53, 64}, { 32, 43, 54, 65}, { 33, 44, 55, 66}, { 34, 45, 56, 67}, { 35, 46, 57, 68}, { 36, 47, 58, 69}, { 37, 48, 59, 70},
        { 40, 51, 62, 73}, { 41, 52, 63, 74}, { 42, 53, 64, 75}, { 43, 54, 65, 76}, { 44, 55, 66, 77}, { 45, 56, 67, 78}, { 46, 57, 68, 79}, { 47, 58, 69, 80},
        { 50, 61, 72, 83}, { 51, 62, 73, 84}, { 52, 63, 74, 85}, { 53, 64, 75, 86}, { 54, 65, 76, 87}, { 55, 66, 77, 88}, { 56, 67, 78, 89}, { 57, 68, 79, 90},
        { 60, 71, 82, 93}, { 61, 72, 83, 94}, { 62, 73, 84, 95}, { 63, 74, 85, 96}, { 64, 75, 86, 97}, { 65, 76, 87, 98}, { 66, 77, 88, 99}, { 67, 78, 89, 100},
        { 30, 21, 12, 3}, { 31, 22, 13, 4}, { 32, 23, 14, 5}, { 33, 24, 15, 6}, { 34, 25, 16, 7}, { 36, 26, 17, 8}, {36, 27, 18, 9}, { 37, 28, 19, 10},
        { 40, 31, 22, 13}, { 41, 32, 23, 14}, { 42, 33, 24, 15}, { 43, 34, 25, 16}, { 44, 35, 26, 17}, { 46, 36, 27, 18}, {46, 37, 28, 19}, { 47, 38, 29, 20},
        { 50, 41, 32, 23}, { 51, 42, 33, 24}, { 52, 43, 34, 25}, { 53, 44, 35, 26}, { 54, 45, 36, 27}, { 56, 46, 37, 28}, {56, 47, 38, 29}, { 57, 48, 39, 30},
        { 60, 51, 42, 33}, { 61, 52, 43, 34}, { 62, 53, 44, 35}, { 63, 54, 45, 36}, { 64, 55, 46, 37}, { 66, 56, 47, 38}, {66, 57, 48, 39}, { 67, 58, 49, 40},
        { 70, 61, 52, 43}, { 71, 62, 53, 44}, { 72, 63, 54, 45}, { 73, 64, 55, 46}, { 74, 65, 56, 47}, { 76, 66, 57, 48}, {76, 67, 58, 49}, { 77, 68, 59, 50},
    };

    for (int i = 0; i < 98; i++) {
        int count = 0;
        for (int j = 0; j < 4; j++) {
            if (board[wins[i][j]] == player)
                count++;
        }
        if (count == 4) {
            return true;
        }
    }
    return false;
}

void print_board(std::string indent) {
    std::cout << std::endl;
    std::cout << indent << "-" << board[90] << "-|-" << board[91] << "-|-" << board[92] << "-|-" << board[93] << "-|-" << board[94] << "-|-" << board[95] << "-|-" << board[96] << "-|-" << board[97] << "-|-" << board[98] << "-|-" << board[99] << "- \n";
    std::cout << indent << "-" << board[80] << "-|-" << board[81] << "-|-" << board[82] << "-|-" << board[83] << "-|-" << board[84] << "-|-" << board[85] << "-|-" << board[86] << "-|-" << board[87] << "-|-" << board[88] << "-|-" << board[89] << "- \n";
    std::cout << indent << "-" << board[70] << "-|-" << board[71] << "-|-" << board[72] << "-|-" << board[73] << "-|-" << board[74] << "-|-" << board[75] << "-|-" << board[76] << "-|-" << board[77] << "-|-" << board[78] << "-|-" << board[79] << "- \n";
    std::cout << indent << "-" << board[60] << "-|-" << board[61] << "-|-" << board[62] << "-|-" << board[63] << "-|-" << board[64] << "-|-" << board[65] << "-|-" << board[66] << "-|-" << board[67] << "-|-" << board[68] << "-|-" << board[69] << "- \n";
    std::cout << indent << "-" << board[50] << "-|-" << board[51] << "-|-" << board[52] << "-|-" << board[53] << "-|-" << board[54] << "-|-" << board[55] << "-|-" << board[56] << "-|-" << board[57] << "-|-" << board[58] << "-|-" << board[59] << "- \n";
    std::cout << indent << "-" << board[40] << "-|-" << board[41] << "-|-" << board[42] << "-|-" << board[43] << "-|-" << board[44] << "-|-" << board[45] << "-|-" << board[46] << "-|-" << board[47] << "-|-" << board[48] << "-|-" << board[49] << "- \n";
    std::cout << indent << "-" << board[30] << "-|-" << board[31] << "-|-" << board[32] << "-|-" << board[33] << "-|-" << board[34] << "-|-" << board[35] << "-|-" << board[36] << "-|-" << board[37] << "-|-" << board[38] << "-|-" << board[39] << "- \n";
    std::cout << indent << "-" << board[20] << "-|-" << board[21] << "-|-" << board[22] << "-|-" << board[23] << "-|-" << board[24] << "-|-" << board[25] << "-|-" << board[26] << "-|-" << board[27] << "-|-" << board[28] << "-|-" << board[29] << "- \n";
    std::cout << indent << "-" << board[10] << "-|-" << board[11] << "-|-" << board[12] << "-|-" << board[13] << "-|-" << board[14] << "-|-" << board[15] << "-|-" << board[16] << "-|-" << board[17] << "-|-" << board[18] << "-|-" << board[19] << "- \n";
    std::cout << indent << "-" << board[0] << "-|-" << board[1] << "-|-" << board[2] << "-|-" << board[3] << "-|-" << board[4] << "-|-" << board[5] << "-|-" << board[6] << "-|-" << board[7] << "-|-" << board[8] << "-|-" << board[9] << "- \n";
}
int get_move() {
    std::cout << "\nMenu hodov: \n";
    std::cout << "-91-|-92-|-93-|-94-|-95-|-96-|-97-|-98-|-99-|-100-" << std::endl;
    std::cout << "-81-|-82-|-83-|-84-|-85-|-86-|-87-|-88-|-89-|-90-" << std::endl;
    std::cout << "-71-|-72-|-73-|-74-|-75-|-76-|-77-|-78-|-79-|-80-" << std::endl;
    std::cout << "-61-|-62-|-63-|-64-|-65-|-66-|-67-|-68-|-69-|-70-" << std::endl;
    std::cout << "-51-|-52-|-53-|-54-|-55-|-56-|-57-|-58-|-59-|-60-" << std::endl;
    std::cout << "-41-|-42-|-43-|-44-|-45-|-46-|-47-|-48-|-49-|-50-" << std::endl;
    std::cout << "-31-|-32-|-33-|-34-|-35-|-36-|-37-|-38-|-39-|-40-" << std::endl;
    std::cout << "-21-|-22-|-23-|-24-|-25-|-26-|-27-|-28-|-29-|-30-" << std::endl;
    std::cout << "-11-|-12-|-13-|-14-|-15-|-16-|-17-|-18-|-19-|-20-" << std::endl;
    std::cout << "-01-|-02-|-03-|-04-|-05-|-06-|-07-|-08-|-09-|-10-" << std::endl;
    std::cout << "\n";

    print_board("");
    std::cout << "\nVvod chisla: ";


    int move;
    std::cin >> move;
    while (move > 100 || move < 1 || board[move - 1] != '-') { //|| move >= 'A' && move <= 'Z' || move >= 'a' && move <= 'z'
        std::cout << "Vvedite chislo ot (1 do 100):\n";
        std::cin >> move;
    }
    return move;
}

char play_and_get_winner() {
    int turn = 1;

    while (!has_wonQ('X') && !has_wonQ('0')) {
        clearscreen();
        int move = get_move();
        clearscreen();
        if (turn % 2 == 1) {
            board[move - 1] = 'X';
            if (has_wonQ('X')) {
                std::cout << "X,Pozdravlyau vi vuigrali!\n";
                return 'X';
            }

        }
        else {
            board[move - 1] = '0';
            if (has_wonQ('0')) {
                std::cout << "Y,Pozdravlyau vi vuigrali!\n";
                return '0';
            }
        }
        turn++;
        if (turn == 100) {
            std::cout << "nechya\n";
            return 'D';
        }
    }
    return 0;
}

int main() {
    setlocale(LC_ALL, "Russian");
    std::cout << "Салам\n\n";
    std::string reply = "y";
    int x_wins = 0, o_wins = 0, ties = 0;

    while (reply == "y") {
        clearboard();
        char winner = play_and_get_winner();
        print_board("\t  ");

        switch (winner) {
        case 'X':
            x_wins++;
            break;
        case '0':
            o_wins++;
            break;
        case 'D':
            ties++;
            break;
        }

        std::cout << "\n\t*Winer statistic*\nPlayer X: " << x_wins
            << ", Player 0: " << o_wins << " and Ties: " << ties << "\n\n";
        std::cout << "\n Сыграем ещё раз? (y/n): ";
        std::cin >> reply;
        while (reply != "y" && reply != "n") {
            std::cout << "please inter a valid reply (y/n):";
            std::cin >> reply;
        }

    }


    return 0;
}
